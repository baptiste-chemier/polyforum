package application.polyforum.controller;

import javax.annotation.Resource;

import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.web.context.WebApplicationContext;

import application.polyforum.config.ContextConfig;
import application.polyforum.config.WebMvcConfig;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {ContextConfig.class, WebMvcConfig.class})
@WebAppConfiguration
public class EtudiantControllerTest {

    @Resource 
    private WebApplicationContext wac;
    
    @Resource
    private EtudiantRepository etudiantRepositoryMock;
    
    private MockMvc mockMvc;
    
    @Before
    public void init() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
   }
    
   @Test
   public void checkGetBookByIdUrl() throws Exception{
       mockMvc.perform(MockMvcRequestBuilders.get("/api/book/1"))
              .andExpect(MockMvcResultMatchers.status().isOk());

   }
   @Test
   public void checkGetBooksUrl() throws Exception{
       mockMvc.perform(MockMvcRequestBuilders.get("/api/books"))
              .andExpect(MockMvcResultMatchers.status().isOk());
   }
   
   @Test
   public void getBooks() throws Exception{
       mockMvc.perform(MockMvcRequestBuilders.get("/api/books"))
              .andExpect(MockMvcResultMatchers.status().isOk())
              .andExpect(MockMvcResultMatchers.jsonPath("$", Matchers.hasSize(11)));
   }
}
